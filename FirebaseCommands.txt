Create the Project:
go to firebase
setup name, analytics, etc.
create flutter project
git


Minimal Install:
add dependencies to yaml
- cloud_firestore
- firebase_core 
- firebase_auth 
- firebase_messaging
- flutter_local_notifications
- (?) firebase_analytics
prep flutter project
- android
 - android/app/build.gradle > defaultConfig > applicationId "com.my_company.app_name"
 - android/app/src/debug > AndroidManifest.xml > "com.my_company.app_name"
 - android/app/src/main > AndroidManifest.xml > "com.my_company.app_name"
 - android/app/src/main > AndroidManifest.xml > label > "Cruise Calls"
 - android/app/src/profile > AndroidManifest.xml > "com.my_company.app_name"
 - android/app/src/main/kotlin/... > MainActivity.kt > "com.my_company.app_name"
- iOS
 - ios > xcodeproj > signing & capabilities > bundle identifier "com.myCompany.appName"
 - ios > Runner > Info.plist > update CFBundleDisplayName
 - (?) update Display Name to name of choice: "MyApp"
- macOS
 - macos > xcodeproj > signing & capabilities > bundle identifier "com.myCompany.appName"
 - ios > Runner > Info.plist > update CFBundleDisplayName
 - update Display Name to name of choice: "MyApp"
prep firebase project
- add auth methods
- add database
- enable functions (upgrades to Blaze)
- enable messaging (via below)
cd [project]
flutterfire configure
- select project
- select platforms 
android 
- update android compile SDK version
 - android > app > build.gradle > compileSdkVersion > 33 (for now)
- update android min SDK version
 - android > app > build.gradle > defaultConfig > minSdkVersion > 21 (for now)
- gitignore google-services.json
- need multidex
 - open android simulator
 - flutter run (down below) and it will ask / setup automatically
iOS
- podfile
 - uncomment line 2 in Podfile & make sure it's 12.0 (for now)
- minimum deployment in Runner.xcodeproj > Runner > Info > iOS Deployment Target 
 - upgrade minimum iOS version to 12.0 (for now) 
 - check warnings > Perform Changes
- minimum deployment in Runner.xcworkspace > Pods > iOS Deployment Target 
 - upgrade minimum iOS version to 12.0 (for now) 
 - check warnings > Perform Changes
- update Pods
 - cd ios
 - pod update
- gitignore GoogleService-Info.plist
macOS
- podfile
 - update line 1 platform :osx to 10.13 (for now)
- minimum deployment in Runner.xcodeproj
 - upgrade minimum macOS version to 10.13 (for now) 
- update Pods
 - cd ios
 - pod update
- gitignore GoogleService-Info.plist
web
- firebase init 
- select features
 - if using Cloud Firestore, setup in Firebase before moving on
 - if using Cloud Firestore, set Default GCP resource location in Project Settings
 - if using Cloud Functions, switch to Blaze plan
- use existing project 
- select firebase-project 
- typescript
- yes esLint
- set public directory to 'build/web' 
- configure as single page 'N'
- (?) setup auto deploys w/ github (n)
initialize in main
- import firebase_core and firebase_options
- async
- WidgetsFlutterBinding.ensureInitialized()
- await Firebase.initializeApp( options: DefaultFirebaseOptions.currentPlatform )
flutter run
- on Android simulator
- may take a couple of minutes
(web) flutter build web 
- firebase deploy


Push Notification & Cloud Messaging:
set Android channel, icon, color & intent
- AndroidManifest > after </activity>
- add strings.xml to res > values
 - define default notification here (see past examples)
- channel
 - name="com.google.firebase.messaging.default_notification_channel_id"
 - value="@string/default_notification_channel_id"
- icon
 - name="com.google.firebase.messaging.default_notification_icon"
 - resource="@drawable/icon_name_no_file_extension"
 - add icon_small.png to drawable (NOTE THE UNDERSCORE)
- (?) color 
 - name="com.google.firebase.messaging.default_notification_color"
 - resource="@android:color/red"
- intent (intent-filter)
 - action name="FLUTTER_NOTIFICATION_CLICK"
 - category name="android.intent.category.DEFAULT"
- event (intent-filter)
 - action name="com.google.firebase.MESSAGING_EVENT"
enable Push Notifications for iOS
- Runner > Targets > Signing & Capabilities > +Capabilities > Push Notifications
- Runner > Targets > Signing & Capabilities > +Capabilities > Background Modes
 - Background fetch 
 - Remote notifications 
- enable in Info.plist
 - <key>UIApplicationSceneManifest</key>
 - <dict>
 -   <key>UISceneConfigurations</key>
 -   <dict/>
 - </dict>
 - <key>FirebaseAppDelegateProxyEnabled</key>
 - <false/>
target GoogleService-Info.plist membership to Runner
- open Runner.xcodeproj > select GoogleService-Info.plist 
- check Runner in Target Membership (right panel)
update AppDelegate.Swift
- import Firebase
- FirebaseApp.configure() (above GeneratedPluginRegistrant...)
- (?) application.registerForRemoteNotifications()
- (?) if #available(iOS 10.0, *) {
 - (?) UNUserNotificationCenter.current().delegate = self as? UNUserNotificationCenterDelegate
- (?) }
link APN w/ FCM for iOS
- sign into developer.apple.com > Certificates, IDs & Profiles > Keys > +
 - Key Name: [PROJECT]FbCnAPNS
 - enable Apple Push Notification service (APNs) > Continue > Register 
 - download (p8 file)
 - copy Key ID
- go to Firebase Project > Settings > Cloud Messaging > iOS app configuration > Upload
 - browse & select p8 
 - copy & paste Key ID
 - enter Team ID (https://developer.apple.com/account/ > Membership details)
- update App Identifier (already present as 'XC com [business] [appName]' and enabled w/ flutterfire)
 - developer.apple.com > Certificates, IDs & Profiles > Identifiers > select 'XC com [business] [appName]'
 - update description
 - verify Push Notifications are enabled
 - (?) configure SSL certification
- generate provisioning profile 
 - developer.apple.com > Certificates, IDs & Profiles > Profiles > +
 - iOS App Development > Select an App ID > select App Identifier (see above)
 - select certificate (or create one, then come back) and Continue
 - select testing device and Continue
 - create name '[App Name] PP'
 - download and (double) click to install 
  - (?) opens Xcode
  - (?) (do after next step ?) update / clear errors > Perform Changes
(?) enable Cloud Messaging API (Legacy)
- Project Settings > Cloud Messaging > dots > Manage
- Enable
get (and save) FCM token to user account
set NotificationSettings and request permission(s)
create instance of FirebaseMessaging (in main and/or in seperate file)
set Foreground Messages
- FirebaseMessaging.onMessage.listen( ... )
- Firebase -> Cloud Messaging -> Compose notification 
 - just title and text (and target app, i.e. android for now)
set Background Messages
- backgroundHandler
enable Cloud Messaging API (Legacy)


For Functions:
initialize
- (?) firebase login
- firebase init functions
- select project
- select Typescript
- use ESLint
- install NPM dependencies
add functions in index.tsx
- use only "send" and "sendMulticast" for now (?) 
(?) check java is updated on mac
fireabase init emulators
- select functions & firestore
- enter > enter > yes > enter > yes
firebase emulators:start
deploy
- (?) upgrade to Blaze plan
- firebase deploy --only functions


Auth with GoogleSignIn:
(?) if using Google Sign In (or other?)
- info icon's link for debug signing certificate
- run debug certificate fingerprint command in terminal
 - default password: 'android'
- copy / paste SHA1 password
(?) if using Google Sign In (or other?)
- go to Android apps
- add fingerprint for SHA-256
- save
- add CFBundleURLTypes to iOS > Runner > Info.plist 
 - see Firebase_Images > CFBundleURLTypes.png


Analytics:
dependencies
- firebase_analytics
instantialize in main
- FirebaseAnalytics analytics = FirebaseAnalytics.instance;
disable Ad Id
- add to top line: $FirebaseAnalyticsWithoutAdIdSupport = true
 - /ios/Podfile
 - /macos/Podfile
[more stuff...]

