Flutter Commands

Install:
https://flutter.dev/docs/get-started/install/macos
flutter create my_app
cd my_app

Checks:
flutter doctor
which flutter

Standard:
open -a Simulator
flutter run
- prompts for device after initial setup w/ device / simulator 
- devices needs to be active / open to activate

Adding Packages:
go to pub.dev
- manual search and addition to pubspec.yaml

SHIFT+CMD+P 
> Dart: Add Dependency
enter package
select package

Upgrading / Updating:
flutter upgrade
see if "dart:html" is added to file and remove
flutter clean
flutter run

Upgrading an older version:
flutter pub upgrade --major-versions

Removing excess / old files:
flutter clean
flutter pub get

Installing for Local Testing
flutter run --release
- troubleshoot w/ 'flutter clean'

Check devices:
flutter devices

Get all yaml packages:
flutter packages get

Release on iOS:
(https://docs.flutter.dev/deployment/ios)
check app name
- ios > Runner > Info.plist > CFBundleName & CFBundleDispayName
update pubspec.yaml version
open Runner.xcodeproj
- check display name
- check bundle identifier
- sign in
- check assets
- check info.plist and user permissions requests
add iPad images / app icons (all sizes?)
 - install flutter_launcher_icons
 - (see pub.dev for specifics)
 - remove_alpha_ios: true
 - set all image_paths to the icon to useun once on a real device
(?) avoid [ITMS-90078: Missing Push Notification Entitlement]
 - enable Push Notifications in Runner.xcodeproj
  - Signing & Capabilities > +Capability > Push Notifications
flutter build ipa
(?) setup bundle id
- (note: gets auto setup as 'XC __APP__' thru VS & Xcode)
 - (during 'flutter build ipa' i think)
- go to developer.apple.com
- go to certificates, identifiers, and profiles
- go to identifiers
- add new
 - App IDs -> App
 - match to xcode 
 - select capabilities / services
 - register
setup app on store
- go to appstoreconnect.apple.com
- add New App
- fill out info & create
submit a build
- open newly created archive (see vs code output)
 - app/build/ios/archive/...
- (?) validate app
 - next -> next -> always allow -> validate -> done
- distribute app
 - app store connect -> upload -> next -> next -> upload -> done
testflight vs. full submit

Release on Android:
(https://docs.flutter.dev/deployment/android)
check app name 
- AndroidManifest -> android:label
install flutter_launcher_icons
- (see pub.dev for specifics)
- remove_alpha_ios: true
- set all image_paths to the icon to use
keystore
- keytool -genkey -v -keystore ~/upload-keystore.jks -keyalg RSA -keysize 2048 -validity 10000 -alias upload
- key.properties
- add to android -> app -> build.gradle
- build types w/ siging configs
- release
build
- flutter build appbundle


Update and Submit New build:
update pubspec.yaml version
open Runner.xcodeproj
- update version #
- update build #
- check minimum deployment (13.0)
open Runner.xcworkspace
- check minimum deployment in Runner & Pods (13.0)
open ios > Flutter > AppFrameworkInfo.plist 
- update MinimumOSVersion (13.0)
flutter build ipa
submit a build
- open newly created archive (see vs code output)
 - app/build/ios/archive/...
- (x) validate app (checks and balances; not necessary)
 - next -> next -> always allow -> validate -> done
- distribute app
 - app store connect -> upload -> next -> next -> upload -> done
- login to appstoreconnect 
 - go to testflight
 - Manage Compliance
flutter build appbundle



 Android info
 keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android

 